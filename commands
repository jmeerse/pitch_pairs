if (!requireNamespace('devtools', quietly = TRUE)){
  install.packages('devtools')
}

devtools::install_github(repo = "BillPetti/baseballr")

install.packages("baseballr")

#install libraries -- use install.packages command (see above) if not installed
#run library commands each time you start r
library(baseballr)
library(dplyr)
library(ggplot2)
library(tidyr)

#look up player id
JV_id <- playerid_lookup("Verlander", "Justin")

view(JV_id) #find mlbam_id

#scrape Justin Verlander's 2019 season -- enter the id number from above 
JV2019 <- scrape_statcast_savant_pitcher(start_date = "2019-01-01", end_date = "2019-12-31", pitcherid = ********) #enter id number in place of *******

#look at pitch pairs -- create next_pitch variables
JV2019 <- JV2019 %>% 
  mutate(next_pitch = lag(JV2019$pitch_type),
                           next_pitch_x = lag(release_pos_x),
                           next_pitch_z = lag(release_pos_z)
  )
  
  #eliminate next pitch when changing batters
JV2019$next_pitch <- if_else(JV2019$batter == lag(JV2019$batter),
                              lag(JV2019$pitch_type), NULL)

#remove rows with na in next_pitch
JV2019 <- JV2019 %>% drop_na(next_pitch)


#count types of pitches
count(JV2019, pitch_type)

#2-way table of 2-pitch combos
with(JV2019, table(pitch_type, next_pitch))

#graph stacked bar chart
ggplot(JV2019, aes(fill=next_pitch, y=next_pitch, x=pitch_type)) + 
  geom_bar(position="stack", stat="identity")


#remove low frequency pitches 
JV2019 <- subset(JV2019, pitch_type != '' & pitch_type != 'EP'& pitch_type != 'FC' & next_pitch != '')  #change EP and FC for other pitchers

#graph better stacked bar chart
ggplot(JV2019, aes(fill=next_pitch, y=next_pitch, x=pitch_type)) + 
  geom_bar(position="stack", stat="identity")

#better 2-way table of 2-pitch combos
with(JV2019, table(pitch_type, next_pitch))

#scatterplot
ggplot(JV2019, aes(x=release_pos_x, y=release_pos_z)) + geom_point()

#FF SL combo
JV2019_FFSL <- subset(JV2019, pitch_type == 'FF' & next_pitch == 'SL')

# To overlay scatterplots in R - need to make one list of pitch type, then combine release points
#try with variables(?) first
FFSL <- c(JV2019_FFSL$pitch_type, JV2019_FFSL$next_pitch)
FFSL_x <- c(JV2019_FFSL$release_pos_x, JV2019_FFSL$next_pitch_x)
FFSL_z <- c(JV2019_FFSL$release_pos_z, JV2019_FFSL$next_pitch_z)

#rewrite JV2019_FFSL to just have release points and types
JV2019_FFSL <- data.frame(FFSL, FFSL_x, FFSL_z)

#scatterplot of release points colored by pitch_type
ggplot(JV2019_FFSL, aes(x=FFSL_x, y=FFSL_z, shape=FFSL, color=FFSL)) +
  geom_point() + xlim(-3,3) + ylim(0,7)





#################################################################
#for James
#if you want to use strikeFX need to rename plate_x and plate_z to px and pz
# strikeFX info/links below
# https://www.rdocumentation.org/packages/pitchRx/versions/0.5/topics/strikeFX - strikeFx documentation
# https://blog.cpsievert.me/2014/04/25/strikezone-plots-made-easy-with-pitchrx/
# https://pitchrx.cpsievert.me/RJwrapper.pdf - journal article
# https://pitchrx.cpsievert.me/ -- intro to pitchrx package


#getting a bunch of pitchers using their ids - use savant to get ids -- this makes a list of pitcher ids to use in next command
pitchers <- c(592662, 554430, 543037, 669203, 453286, 592332, 656302, 605400,
              450203, 621111, 605540, 641816, 593423, 605397, 621244, 645261, 608337,
              506433, 628711, 543135, 642547, 640455, 622491, 593958, 607074, 621121,
              608566, 601713, 458681)

#sets initial empty dataframe 
so2022 <-data.frame()

#goes through and gets the pitches
for (val in pitchers) {
  so2022 <- rbind(so2022, scrape_statcast_savant_pitcher(start_date = "2021-01-01", end_date = "2021-12-31", pitcherid = val))
}

#filter all pitches to just strikeout pitches
sos <- filter(so2022, events == "strikeout")

#remove NA
sos <- filter(sos, pitch_type != "NA") 


#defines bar chart of strikeout pitches -- facet_wrap makes graph for each pitcher - want to increase space between - take it out for just all pitches combined 
allpitches <-  sos %>% 
  +   ggplot(aes(x = pitch_type, color = pitch_type)) + 
  +   geom_bar() + facet_wrap(~player_name)

allpitches  #shows the graph

#need table and segmented bar chart by pitcher

#stacked bar chart by pitcher
ggplot(sos, aes(fill=pitch_type, y=pitch_type, x=player_name)) + 
      geom_bar(position="fill", stat="identity") +
  theme(axis.text.x = element_text(angle = 90, size = 10))
      
#segmented bar chart by pitcher
ggplot(sos, aes(fill=pitch_type,  x=player_name)) + 
   geom_bar(position="fill") +
  theme(axis.text.x = element_text(angle = 90, size = 10))


#scatterplot of all pitch locations, separated by left/right batter - play with font size and strikezone alpha -- facet wrap by pitch type too
ggplot(sos, aes(x = plate_x, y = plate_z, color = pitch_type )) +
     scale_x_continuous(limits = c(-3,3)) +
     scale_y_continuous(limits = c(0,5)) +
     annotate("rect", xmin = -1, xmax = 1, ymin = 1.5, ymax = 3.5, color = "black", alpha = 0) +
     labs(title = "Strikeouts") +
     ylab("Horizontal Location (ft.)") +
     xlab("Vertical Location (ft): Catcher's View") +
     labs(color = "Pitch") +
     geom_point(size = 1, alpha = .65) +
     theme(axis.title = element_text(size = 15, color = "black", face = "bold")) +
     theme(plot.title = element_text(size = 30, face = "bold", vjust = 1)) +
     theme(axis.text = element_text(size = 13, face = "bold", color = "black")) +
     theme(legend.title = element_text(size = 12)) +
     theme(legend.text = element_text(size = 12)) +
     facet_wrap(~stand)



